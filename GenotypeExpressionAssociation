library(GenomicFeatures)
library(GenomicRanges)
library(GenomicAlignments)
library(tidyverse)
library(Rsamtools)
library(edgeR)
library(DESeq2)
library(GOstats)
library(systemPipeR)
library(stringr)
library(dplyr)   
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install(version = "3.15")

BiocManager::install("DESeq2")

if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("GOstats")


if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

BiocManager::install("systemPipeR", force = TRUE)

install.packages("remotes")
remotes::install_github("plger/overlapper")

txdb<- makeTxDbFromGFF(file='~/Kyuss_Genome/Kyuss_1697_KYUS.gff', format = 'gff', dataSource = "~/Kyus_RNASeq/", organism = NA)
saveDb(txdb, file="At.sqlite")
txdb<-loadDb("At.sqlite")
eByg<-exonsBy(txdb, by = "gene")

# Generate Targets file

targets <- data.frame(FileName = c("20002-1.bam", "20003-19.bam", "20007-1.bam", "20009-2.bam", "20010_1.bam", "B11-20-3-6.bam", "B11-20-3-11.bam", "E7.bam","H15.bam", "J7.bam", "S30.bam", "S32.bam", "S33.bam"),
                      SampleName= c("20002-1", "20003-19", "20007-1", "20009-2", "20010-1", "B11-20-3-6", "B11-20-3-11", "E7","H15", "J7","S30", "S32", "S33"),
                      Factor= c ("WT", "WT", "WT","WT", "WT","Hom", "Hom", "Hom", "Het", "Hom", "Het", "Het", "Het")
)
write.csv(targets, "targets.csv", row.names = FALSE)
targets<-read.csv('targets.csv', header=T)
targets$Factor<-factor(targets$Factor, unique(targets$Factor)[c(2,3,1)])
targets$num<-as.integer(targets$Factor)

##Next use the readLines command to tell R where to find the data, and read in the data using BamFileList
bf<-BamFileList(list.files(path = "~/RNAseqExpression2/", pattern = "\\.bam$"))
bf

# Generate gene counts file 

countR<-summarizeOverlaps(eByg, bf, ignore.strand = TRUE)
countR<-assays(countR)$counts %>% as.data.frame()
head(countR)
names(countR)<-list.files(path = "~/RNAseqExpression/", pattern = "\\.bam$")
colnames(countR)<-sub("Aligned.sortedByCoord.out.bam", ".bam", colnames(countR))
countR[1:3,]

##deseq
conds<-targets$Factor
targets$FileName
colnames(countR)
dds<- DESeqDataSetFromMatrix(countData = as.matrix(countR),
                             colData = data.frame(conds=factor(conds)),
      
                                                    design = formula(~conds))
dds<-DESeq(dds)

## Normalising read counts
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
plot(sizeFactors(dds), colSums(counts(dds)),
     ylab= "library sizes", xlab= "size factors", cex =0.6)
normalized_counts <- counts(dds, normalized=TRUE)
write.table(normalized_counts, file="normalized_counts.txt", sep="\t", quote=F, col.names=NA)
colData(dds)
boxplot(normalized_counts,main="Normalized",cex=.6) 
boxplot((counts(dds)), main = "Read counts only", cex = 1)

## Plotting Normalised vs raw reads

png(file="~/Figures/RawReads.png", width = 1200, height = 500)
par(mar=c(5,6,4,1)+.1)
boxplot(log2(counts(dds)+1), notch=TRUE, main="Raw read counts", ylab= "log2 readcounts per gene", names = dds$conds, cex=0.6,cex.lab=2, cex.axis=2, cex.main=2)
dev.off()

png(file="~/Figures/Normalised.png", width = 1200, height = 500)
par(mar=c(5,6,4,1)+.1)
boxplot(log2(counts(dds, normalize= TRUE)+1), notch=TRUE, main="Normalised read counts", ylab= "log2 readcounts per gene", names=dds$conds, cex=0.6, cex.lab=2, cex.axis=2, cex.main=2)
dev.off()

## Read in file containing genes within the region linked to SF-locus
SFgenes <-readLines("~/RNAseqExpression/SF_genes.txt")

ncdf<-as.data.frame(normalized_counts)
normalisedcountsSF<-filter(ncdf, rownames(ncdf) %in% c(SFgenes))

write.csv(normalisedcountsSF, "normSF.csv")
normSFg<-read.csv("normSF_graph.csv")
class(normSFg)
normSFg$Group<-factor(normSFg$Group, levels= c("Hom", "Het", "WT"))

names(normalisedcountsSF)
match(names(normalisedcountsSF),targets$FileName)
log(normalisedcountsSF)
normalisedcountsSF[normalisedcountsSF==0]<-NA
log_normalisedcountsSF<-log(normalisedcountsSF)

linmodlist<-list()
lancSF<-lapply(1:nrow(log_normalisedcountsSF), function(x){
  gene<-rownames(log_normalisedcountsSF)[x]
  linmod<-lm(as.numeric(log_normalisedcountsSF[x,]) ~ targets$num)
  sum_l<-summary(linmod)
  cor<-cor.test(as.numeric(log_normalisedcountsSF[x,]), targets$num)
  df<-data.frame(r2=sum_l$r.squared, pval=sum_l$coefficients[2,4], gene, 
                 corpval=cor$p.value, cor_est=cor$estimate)
  df
  linmodlist[[x]]<<-linmod
  names(linmodlist)[x]<<-gene
  df
})

names(linmodlist)
lancSF
as.numeric(coef(linmodlist[[1]])[1])
coefs<-data.frame(bind_rows(lapply(linmodlist, coef)),gene=names(linmodlist))
coefs

names(lancSF)
class(lancSF)
mod_df<-bind_rows(lancSF)
mod_df$pval
mod_df

## Plot correlation estimate

cor<-ggplot(mod_df, aes(pval, cor_est))+
  geom_point(size = 3)+scale_x_continuous(trans="log", labels = label_number(accuracy = 0.01))+
  geom_hline(yintercept=0.05)+geom_vline(xintercept=0.05)+
  geom_label_repel(aes(label = gene),
                   subset(mod_df, pval <0.045),
                   box.padding   = 1, 
                   point.padding = 1,
                   size = 6,
                   max.overlaps = 10,
                   segment.color = 'grey50')+
  ylab(label = "correltion estimate") + xlab(label="p value") + ylim(-1, 1)+ theme(axis.text.x = element_text(size = 20, hjust = 0.5, vjust=0.5,), axis.title = element_text(size=20)) + theme(axis.text.y = element_text(size = 20, hjust = 0.5, vjust=0.5,), axis.title = element_text(size=20))+ theme(legend.text=element_text(size=20))
ggsave(plot = cor, "~/Figures/cor.png", width=16,height=8, bg = "white")

## Plot R2 
r2<-ggplot(mod_df, aes(pval, r2))+
  geom_point(size = 3)+scale_x_continuous(trans="log", labels = label_number(accuracy = 0.01))+
  geom_hline(yintercept=0.05)+geom_vline(xintercept=0.05)+
  geom_label_repel(aes(label = gene),
                   subset(mod_df, pval <0.045),
                   box.padding   = 1, 
                   point.padding = 1,
                   size = 7,
                   max.overlaps = 20,
                   segment.color = 'grey50')+
  ylab(label = "R2") + xlab(label="p value") + ylim(-1, 1)+ theme(axis.text.x = element_text(size = 20, hjust = 0.5, vjust=0.5,), axis.title = element_text(size=20)) + theme(axis.text.y = element_text(size = 20, hjust = 0.5, vjust=0.5,), axis.title = element_text(size=20))+ theme(legend.text=element_text(size=20))
ggsave(plot = r2, "~/Figures/r2.png", width=16,height=8, bg = "white")

cor_r2<-ggarrange(cor, r2, ncol = 1, nrow = 2)
ggsave(plot = cor_r2, "~/Figures/cor_r2.png", width=16,height=16, bg = "white")







